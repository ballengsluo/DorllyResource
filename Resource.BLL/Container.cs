//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Resource.BLL
{
    using Autofac;
    using Resource.IBLL;
     public  class Container
        {
            /// <summary>
            /// IOC 容器
            /// </summary>
            public static IContainer container = null;
    
            /// <summary>
            /// 获取 IDal 的实例化对象
            /// </summary>
            /// <typeparam name="T"></typeparam>
            /// <returns></returns>
            public static T Resolve<T>()
            {
                try
                {
                    if (container == null)
                    {
                        Initialise();
                    }
                }
                catch (System.Exception ex)
                {
                    throw new System.Exception("IOC实例化出错!" + ex.Message);
                }
    
                return container.Resolve<T>();
            }
    		/// <summary>
            /// 初始化
            /// </summary>
            public static void Initialise()
            {
                var builder = new ContainerBuilder();
                //格式：builder.RegisterType<xxxx>().As<Ixxxx>().InstancePerLifetimeScope();
    			            builder.RegisterType<BuildingService>().As<IBuildingService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<CityService>().As<ICityService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<FloorService>().As<IFloorService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<MenuService>().As<IMenuService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<ParkService>().As<IParkService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<PermissionService>().As<IPermissionService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<RegionService>().As<IRegionService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<ResourceService>().As<IResourceService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<RGroupService>().As<IRGroupService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<RImageService>().As<IRImageService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<RoleService>().As<IRoleService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<RPriceService>().As<IRPriceService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<RTypeService>().As<IRTypeService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<SProviderService>().As<ISProviderService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<StageService>().As<IStageService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<StandardPriceService>().As<IStandardPriceService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<UnitService>().As<IUnitService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<UserService>().As<IUserService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<ResOtherService>().As<IResOtherService>().InstancePerLifetimeScope();   
    			            builder.RegisterType<ResRoomService>().As<IResRoomService>().InstancePerLifetimeScope();   
    			      
                container = builder.Build();
            }
    }
}
